EntityHandleProxy = EntityProxy:new()
EntityHandleProxy.fieldsToParse = {
	"ActionResources",
	"AddedSpells",
	"AttitudesToPlayers",
	"AttributeFlags",
	"AvailableLevel",
	"BaseHp",
	"BaseStats",
	"BoostsContainer",
	"Bound",
	"CanBeDisarmed",
	"CanBeLooted",
	"CanBeWielded",
	"CanDeflectProjectiles",
	"CanDoActions",
	"CanEnterChasm",
	"CanInteract",
	"CanModifyHealth",
	"CanMove",
	"CanSeeThrough",
	"CanSense",
	"CanSpeak",
	"CanTravel",
	"CanTriggerRandomCasts",
	"Classes",
	"CombatParticipant",
	"Concentration",
	"Darkness",
	"Data",
	"DifficultyCheck",
	"DisplayName",
	"DualWielding",
	"EncumbranceState",
	"EncumbranceStats",
	"EocLevel",
	"Expertise",
	"Faction",
	"FleeCapability",
	"HealBlock",
	"Health",
	"Hearing",
	"Icon",
	"InterruptContainer",
	"InterruptPreferences",
	"Invisibility",
	"LearnedSpells",
	"Level",
	"LevelUp",
	"Loot",
	"Movement",
	"ObjectInteraction",
	"ObjectSize",
	"OriginalTemplate",
	"PassiveContainer",
	"Proficiency",
	"ProgressionContainer",
	"Race",
	"Resistances",
	"ServerAiArchetype",
	"ServerAnubisExecutor",
	"ServerAnubisTag",
	"ServerBaseData",
	"ServerBaseProficiency",
	"ServerBaseSize",
	"ServerBaseStats",
	"ServerBoostBase",
	"ServerBoostTag",
	"ServerCanStartCombat",
	"ServerCharacter",
	"ServerDelayDeathCause",
	"ServerDisplayNameList",
	"ServerExperienceGaveOut",
	"ServerInventoryItemDataPopulated",
	"ServerIsCurrentOwner",
	"ServerIsLatestOwner",
	"ServerIsOriginalOwner",
	"ServerOsirisTag",
	"ServerPassiveBase",
	"ServerPassivePersistentData",
	"ServerPickpocket",
	"ServerRaceTag",
	"ServerReplicationDependencyOwner",
	"ServerSafePosition",
	"ServerShapeshiftStates",
	"ServerStatusDifficultyModifiers",
	"ServerTemplateTag",
	"ShapeshiftHealthReservation",
	"ShootThroughType",
	"SpellAiConditions",
	"SpellBook",
	"SpellBookCooldowns",
	"SpellBookPrepares",
	"SpellCastCanBeTargeted",
	"SpellContainer",
	"Stats",
	"StatusImmunities",
	"SurfacePathInfluences",
	"Tag",
	"Uuid",
	"WeaponSet"
}


ResourceProxy:RegisterResourceProxy("Character", EntityHandleProxy)

function EntityHandleProxy:RenderDisplayableValue(parent, statString)
	---@type Character
	local character = Ext.Stats.Get(statString)

	if character then
		local statText = Styler:HyperlinkText(parent:AddText(statString))
		ResourceManager:RenderDisplayWindow(character, statText:Tooltip())
	end
end
